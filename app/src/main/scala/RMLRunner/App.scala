/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package RMLRunner

import org.apache.jena.riot.RDFDataMgr
import scopt.OParser

import java.nio.file.Files
import java.nio.file.Path
import com.fasterxml.jackson.databind.ObjectMapper
import java.{util => ju}
import com.fasterxml.jackson.core.`type`.TypeReference

case class CLIConfig(
    val jsonConfigFile: String = ""
)

object App {
  def buildCLIParser(): OParser[Unit, CLIConfig] = {

    val builder = OParser.builder[CLIConfig]

    val parser = {
      import builder._
      OParser.sequence(
        programName("RMLRunner"),
        head("RMLRunner"),
        opt[String]('c', "config")
          .required()
          .valueName("<filepath>")
          .validate(x =>
            if (Files.exists(Path.of(x))) success
            else failure(f"File doesn't exists")
          )
          .action((x, c) => c.copy(jsonConfigFile = x))
          .text("A json config file for RMLRunner to configure RMLStreamer"),
        head("help").text(
          "A runner application for executing RMLStreamer using the config file given by the Orchestrator"
        )
      )
    }
    parser
  }

  def handleCLIConfig(cli: CLIConfig) = {
    val objMapper = new ObjectMapper()

    val jsonTree = objMapper.readTree(cli.jsonConfigFile)

    val inputConfig = jsonTree.get("args").get("inputStream")
    val outputConfig = jsonTree.get("args").get("outputStream")

    val inputType = IOType(inputConfig)
    val outputType = IOType(outputConfig)

    val mappingFile =  jsonTree.get("rml-mapping").asText()
  

  }

  def main(args: Array[String]): Unit = {

    val parser = buildCLIParser()
    OParser.parse(parser, args, CLIConfig()) match {
      case Some(value) => handleCLIConfig(value)
      case _           =>
    }

  }

}
