#!/usr/bin/env bash


function divider() {
   local char=$1
    if [[ -z "${1+x}" ]]; then
       char="=" 
    fi
    echo "" 
    printf "${char}%.0s"  $(seq 1 63) 
    echo "" 
    echo ""
}


# DESC: Usage help
# ARGS: None
# OUTS: None
function usage() {
    cat << EOF
This runner script will use the config provided by the Orchestrator to adapt the logical sources in 
the RML mapping document. It will also start the RMLStreamer in docker container once RML document is changed. 

Usage:
     -h|--help                  Displays this help
     -c|--config                Config file generated by the Orchestrator to configure the RMLRunner 
EOF
}

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -c|--config)
      RUNNER_CONFIG="$2"
      shift # past argument
      shift # past value
      ;;
    -h|--help) usage; exit 0   ;;
    --)
    shift
    CLI=("$@")
    break;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      echo "Unknown option: -$OPTARG" >&2
      usage
      exit 1
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


${RUNNER_CONFIG:?Missing runner config -c option. Use -h for help} 2>/dev/null 

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

if [[ ! -f "docker-compose.yml" ]]; then
  
  echo "Flink's docker-compose.yml not found in the current folder!: {SCRIPT_DIR}"
  exit 1 
fi

RMLSTREAMER_CLI_TXT=$(mktemp)


java -jar RMLInjector.jar -c ${RUNNER_CONFIG} -o ${RMLSTREAMER_CLI_TXT} 2>/dev/null
CLI_ARGS=$(cat ${RMLSTREAMER_CLI_TXT})

. ${RMLSTREAMER_CLI_TXT}
echo "RML mapping document has been updated!"
echo "CLI-args: ${CLI_ARGS}"
echo "Updated mapping-file: ${MAPPING_FILE}"
divider

# Docker start-ups for RMLStreamer
docker-compose up -d 
JOB_CLASS_NAME="io.rml.framework.Main"
JM_CONTAINER=$(docker ps --filter name=jobmanager --format={{.ID}})
docker cp RMLStreamer*.jar  "${JM_CONTAINER}":/job.jar

BASE_DATA_PATH="/mnt/data/"
MAPPING_FILE_NAME=$(basename ${MAPPING_FILE})
MAPPING_FILE_CONTAINER_PATH="${BASE_DATA_PATH}${MAPPING_FILE_NAME}"


echo "Copying required files into docker containers..." 
docker cp $MAPPING_FILE "${JM_CONTAINER}:${BASE_DATA_PATH}"
echo "Done"
divider
echo "Executing RMLSTreamer on flink..."
docker exec -d -t -i "${JM_CONTAINER}" flink run -d -c ${JOB_CLASS_NAME} /job.jar ${CLI_ARGS}  -m ${MAPPING_FILE_CONTAINER_PATH} 









